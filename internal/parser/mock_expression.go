// Code generated by mockery v1.0.0. DO NOT EDIT.

// mock

package parser

import mock "github.com/stretchr/testify/mock"
import models "github.com/blkmlk/microshell/internal/models"

// MockExpression is an autogenerated mock type for the Expression type
type MockExpression struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, r
func (_m *MockExpression) Add(ctx SystemContext, r models.Rune) *Response {
	ret := _m.Called(ctx, r)

	var r0 *Response
	if rf, ok := ret.Get(0).(func(SystemContext, models.Rune) *Response); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	return r0
}

// Close provides a mock function with given fields: ctx
func (_m *MockExpression) Close(ctx SystemContext) *CloseResponse {
	ret := _m.Called(ctx)

	var r0 *CloseResponse
	if rf, ok := ret.Get(0).(func(SystemContext) *CloseResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CloseResponse)
		}
	}

	return r0
}

// Complete provides a mock function with given fields: ctx
func (_m *MockExpression) Complete(ctx SystemContext) *CompleteResponse {
	ret := _m.Called(ctx)

	var r0 *CompleteResponse
	if rf, ok := ret.Get(0).(func(SystemContext) *CompleteResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CompleteResponse)
		}
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *MockExpression) Type() ExpressionType {
	ret := _m.Called()

	var r0 ExpressionType
	if rf, ok := ret.Get(0).(func() ExpressionType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExpressionType)
	}

	return r0
}

// Value provides a mock function with given fields: ctx
func (_m *MockExpression) Value(ctx SystemContext) Value {
	ret := _m.Called(ctx)

	var r0 Value
	if rf, ok := ret.Get(0).(func(SystemContext) Value); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Value)
		}
	}

	return r0
}
